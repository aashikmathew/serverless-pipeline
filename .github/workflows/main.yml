name: Build and Deploy

# Test trigger comment
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: servless-pipeline
  REGION: us-central1
  PYTHON_VERSION: '3.9'
  TF_VERSION: '1.0.0'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # Setup Google Cloud
    - name: Set up Cloud SDK
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker
      run: gcloud auth configure-docker gcr.io

    # Build and Push Docker image
    - name: Build and Push Frontend Image
      run: |
        cd serverless-pipeline/src/frontend
        docker build --platform linux/amd64 \
          -t gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }} \
          -t gcr.io/$PROJECT_ID/frontend-service:latest .
        docker push gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }}
        docker push gcr.io/$PROJECT_ID/frontend-service:latest

    # Deploy to Cloud Run (only on main branch)
    - name: Deploy Frontend to Cloud Run
      if: github.ref == 'refs/heads/main'
      run: |
        gcloud run deploy frontend-service \
          --image gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated

    # Deploy Cloud Function (only on main branch)
    - name: Deploy Cloud Function
      if: github.ref == 'refs/heads/main'
      run: |
        cd serverless-pipeline/src/functions/data_validator
        gcloud functions deploy data-validator \
          --runtime python39 \
          --trigger-http \
          --entry-point data_validator \
          --region $REGION \
          --no-gen2 \
          --allow-unauthenticated

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd serverless-pipeline/terraform
        terraform init

    - name: Terraform Format Check
      run: |
        cd serverless-pipeline/terraform
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd serverless-pipeline/terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd serverless-pipeline/terraform
        terraform plan -no-color -out=tfplan
      continue-on-error: true

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: serverless-pipeline/terraform/tfplan

    - name: Terraform Apply
      run: |
        cd serverless-pipeline/terraform
        terraform apply -auto-approve tfplan

    - name: Notify Deployment Status
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'deployments'
        slack-message: |
          Deployment Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Frontend URL: ${{ steps.deploy-frontend.outputs.url }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 