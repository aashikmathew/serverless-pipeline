name: CI/CD Pipeline

# Test trigger comment
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: servless-pipeline
  REGION: us-central1
  PYTHON_VERSION: '3.9'
  TF_VERSION: '1.0.0'

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        cd serverless-pipeline/src/functions/data_validator
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Snyk CLI
      run: |
        npm install -g snyk
        snyk config set api=${{ secrets.SNYK_TOKEN }}
        snyk config set org=aashikmathew

    - name: Run Snyk to check for vulnerabilities
      run: |
        cd serverless-pipeline/src/functions/data_validator
        snyk monitor --project-id=cf6aec5e-868c-4fed-a5ac-0c6bb99e7d1a --file=requirements.txt --severity-threshold=high

    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_CONFIG: .gitleaks.toml
      with:
        config-path: .gitleaks.toml

  test:
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r serverless-pipeline/src/functions/data_validator/requirements.txt
        pip install -r serverless-pipeline/src/frontend/requirements.txt
        pip install pytest pytest-cov flake8 mypy black

    - name: Format with black
      run: |
        black serverless-pipeline/src/ serverless-pipeline/deploy/ --exclude="/(\.git|\.venv|venv|env|\.eggs|\.tox|node_modules)/"

    - name: Lint with flake8
      run: |
        flake8 . --config=.flake8

    - name: Type check with mypy
      run: |
        mypy serverless-pipeline/src/functions/data_validator
        mypy serverless-pipeline/src/frontend

    - name: Run tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2.0.0
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker
      run: |
        gcloud auth configure-docker gcr.io

    - name: Build and Push Frontend Image
      run: |
        cd serverless-pipeline/src/frontend
        docker build --platform linux/amd64 \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -t gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }} \
          -t gcr.io/$PROJECT_ID/frontend-service:latest .
        docker push gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }}
        docker push gcr.io/$PROJECT_ID/frontend-service:latest

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'gcr.io/${{ env.PROJECT_ID }}/frontend-service:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: prod
      url: https://${{ env.PROJECT_ID }}.appspot.com
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2.0.0
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Deploy Frontend to Cloud Run
      id: deploy-frontend
      run: |
        gcloud run deploy frontend-service \
          --image gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated

    - name: Deploy Cloud Function
      id: deploy-function
      run: |
        cd serverless-pipeline/src/functions/data_validator
        gcloud functions deploy data-validator \
          --runtime python39 \
          --trigger-http \
          --entry-point data_validator \
          --region $REGION \
          --no-gen2 \
          --allow-unauthenticated

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd serverless-pipeline/terraform
        terraform init

    - name: Terraform Format Check
      run: |
        cd serverless-pipeline/terraform
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd serverless-pipeline/terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd serverless-pipeline/terraform
        terraform plan -no-color -out=tfplan
      continue-on-error: true

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: serverless-pipeline/terraform/tfplan

    - name: Terraform Apply
      run: |
        cd serverless-pipeline/terraform
        terraform apply -auto-approve tfplan

    - name: Notify Deployment Status
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'deployments'
        slack-message: |
          Deployment Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Frontend URL: ${{ steps.deploy-frontend.outputs.url }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 