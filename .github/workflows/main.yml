# Complete workflow for building, testing, and deploying the application
name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: servless-pipeline
  REGION: us-central1
  PYTHON_VERSION: '3.9'

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
        install_components: 'gke-gcloud-auth-plugin'

    # Enable required APIs
    - name: Enable Required APIs
      run: |
        gcloud services enable cloudresourcemanager.googleapis.com
        gcloud services enable cloudfunctions.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable cloudbuild.googleapis.com
        # Wait for APIs to be enabled
        sleep 30

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io

    # Build and Push Docker image
    - name: Build and Push Frontend Image
      id: docker-build
      run: |
        cd serverless-pipeline/src/frontend
        docker build --platform linux/amd64 \
          -t gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }} \
          -t gcr.io/$PROJECT_ID/frontend-service:latest .
        docker push gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }}
        docker push gcr.io/$PROJECT_ID/frontend-service:latest

    # Deploy to Cloud Run (only on main branch)
    - name: Deploy to Cloud Run
      id: deploy-frontend
      if: github.ref == 'refs/heads/main'
      run: |
        gcloud run deploy frontend-service \
          --image gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated

    # Deploy Cloud Function (only on main branch)
    - name: Deploy Cloud Function
      if: github.ref == 'refs/heads/main'
      run: |
        cd serverless-pipeline/src/functions/data_validator
        gcloud functions deploy data-validator \
          --runtime python39 \
          --trigger-http \
          --entry-point data_validator \
          --region $REGION \
          --no-gen2 \
          --set-env-vars PROJECT_ID=$PROJECT_ID \
          --memory 256MB \
          --timeout 60s \
          --allow-unauthenticated

    # Only run Slack notification if SLACK_BOT_TOKEN is configured
    - name: Notify Deployment Status
      if: always() && github.ref == 'refs/heads/main' && env.SLACK_BOT_TOKEN != null
      uses: slackapi/slack-github-action@v1.25.0
      with:
        # Update this with your actual Slack channel ID
        channel-id: 'C06QXQXR5QD'
        slack-message: |
          üöÄ *Deployment Update*
          *Status:* ${{ job.status }}
          *Repository:* ${{ github.repository }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* ${{ github.sha }}
          *Frontend URL:* ${{ steps.deploy-frontend.outputs.url }}
          
          ${{ job.status == 'success' && 'üéâ Deployment Successful!' || '‚ùå Deployment Failed' }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 