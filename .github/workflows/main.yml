# Complete workflow for building, testing, and deploying the application
name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: servless-pipeline
  REGION: us-central1
  PYTHON_VERSION: '3.9'
  TF_VERSION: '1.5.7'

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy-frontend.outputs.url }}
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io

    # Build and Push Docker image
    - name: Build and Push Frontend Image
      id: docker-build
      run: |
        cd serverless-pipeline/src/frontend
        docker build --platform linux/amd64 \
          -t gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }} \
          -t gcr.io/$PROJECT_ID/frontend-service:latest .
        docker push gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }}
        docker push gcr.io/$PROJECT_ID/frontend-service:latest

    # Deploy to Cloud Run (only on main branch)
    - name: Deploy to Cloud Run
      id: deploy-frontend
      if: github.ref == 'refs/heads/main'
      run: |
        gcloud run deploy frontend-service \
          --image gcr.io/$PROJECT_ID/frontend-service:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated

    # Deploy Cloud Function (only on main branch)
    - name: Deploy Cloud Function
      if: github.ref == 'refs/heads/main'
      run: |
        cd serverless-pipeline/src/functions/data_validator
        gcloud functions deploy data-validator \
          --runtime python39 \
          --trigger-http \
          --entry-point data_validator \
          --region $REGION \
          --no-gen2 \
          --allow-unauthenticated

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd serverless-pipeline/terraform
        terraform init

    - name: Terraform Format Check
      run: |
        cd serverless-pipeline/terraform
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd serverless-pipeline/terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd serverless-pipeline/terraform
        terraform plan -no-color -out=tfplan
      continue-on-error: true

    - name: Save Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: serverless-pipeline/terraform/tfplan
        retention-days: 5

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd serverless-pipeline/terraform
        terraform apply -auto-approve tfplan

    - name: Notify Deployment Status
      if: always()
      uses: slackapi/slack-github-action@v1.25.0
      with:
        channel-id: 'deployments'
        slack-message: |
          Deployment Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Frontend URL: ${{ steps.deploy-frontend.outputs.url }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 